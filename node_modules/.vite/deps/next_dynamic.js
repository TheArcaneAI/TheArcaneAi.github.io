import {
  require_jsx_runtime
} from "./chunk-FKW4TM3P.js";
import {
  require_react
} from "./chunk-MANWBCE5.js";
import {
  __commonJS,
  __require
} from "./chunk-2TUXWMP5.js";

// node_modules/@swc/helpers/cjs/_interop_require_default.cjs
var require_interop_require_default = __commonJS({
  "node_modules/@swc/helpers/cjs/_interop_require_default.cjs"(exports) {
    "use strict";
    function _interop_require_default(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports._ = _interop_require_default;
  }
});

// node_modules/next/dist/shared/lib/loadable-context.shared-runtime.js
var require_loadable_context_shared_runtime = __commonJS({
  "node_modules/next/dist/shared/lib/loadable-context.shared-runtime.js"(exports) {
    "use client";
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "LoadableContext", {
      enumerable: true,
      get: function() {
        return LoadableContext;
      }
    });
    var _interop_require_default = require_interop_require_default();
    var _react = _interop_require_default._(require_react());
    var LoadableContext = _react.default.createContext(null);
    if (true) {
      LoadableContext.displayName = "LoadableContext";
    }
  }
});

// node_modules/next/dist/shared/lib/loadable.shared-runtime.js
var require_loadable_shared_runtime = __commonJS({
  "node_modules/next/dist/shared/lib/loadable.shared-runtime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "default", {
      enumerable: true,
      get: function() {
        return _default;
      }
    });
    var _interop_require_default = require_interop_require_default();
    var _react = _interop_require_default._(require_react());
    var _loadablecontextsharedruntime = require_loadable_context_shared_runtime();
    function resolve(obj) {
      return obj && obj.default ? obj.default : obj;
    }
    var ALL_INITIALIZERS = [];
    var READY_INITIALIZERS = [];
    var initialized = false;
    function load(loader) {
      let promise = loader();
      let state = {
        loading: true,
        loaded: null,
        error: null
      };
      state.promise = promise.then((loaded) => {
        state.loading = false;
        state.loaded = loaded;
        return loaded;
      }).catch((err) => {
        state.loading = false;
        state.error = err;
        throw err;
      });
      return state;
    }
    function createLoadableComponent(loadFn, options) {
      let opts = Object.assign({
        loader: null,
        loading: null,
        delay: 200,
        timeout: null,
        webpack: null,
        modules: null
      }, options);
      let subscription = null;
      function init() {
        if (!subscription) {
          const sub = new LoadableSubscription(loadFn, opts);
          subscription = {
            getCurrentValue: sub.getCurrentValue.bind(sub),
            subscribe: sub.subscribe.bind(sub),
            retry: sub.retry.bind(sub),
            promise: sub.promise.bind(sub)
          };
        }
        return subscription.promise();
      }
      if (typeof window === "undefined") {
        ALL_INITIALIZERS.push(init);
      }
      if (!initialized && typeof window !== "undefined") {
        const moduleIds = opts.webpack && typeof __require.resolveWeak === "function" ? opts.webpack() : opts.modules;
        if (moduleIds) {
          READY_INITIALIZERS.push((ids) => {
            for (const moduleId of moduleIds) {
              if (ids.includes(moduleId)) {
                return init();
              }
            }
          });
        }
      }
      function useLoadableModule() {
        init();
        const context = _react.default.useContext(_loadablecontextsharedruntime.LoadableContext);
        if (context && Array.isArray(opts.modules)) {
          opts.modules.forEach((moduleName) => {
            context(moduleName);
          });
        }
      }
      function LoadableComponent(props, ref) {
        useLoadableModule();
        const state = _react.default.useSyncExternalStore(subscription.subscribe, subscription.getCurrentValue, subscription.getCurrentValue);
        _react.default.useImperativeHandle(ref, () => ({
          retry: subscription.retry
        }), []);
        return _react.default.useMemo(() => {
          if (state.loading || state.error) {
            return _react.default.createElement(opts.loading, {
              isLoading: state.loading,
              pastDelay: state.pastDelay,
              timedOut: state.timedOut,
              error: state.error,
              retry: subscription.retry
            });
          } else if (state.loaded) {
            return _react.default.createElement(resolve(state.loaded), props);
          } else {
            return null;
          }
        }, [
          props,
          state
        ]);
      }
      LoadableComponent.preload = () => init();
      LoadableComponent.displayName = "LoadableComponent";
      return _react.default.forwardRef(LoadableComponent);
    }
    var LoadableSubscription = class {
      promise() {
        return this._res.promise;
      }
      retry() {
        this._clearTimeouts();
        this._res = this._loadFn(this._opts.loader);
        this._state = {
          pastDelay: false,
          timedOut: false
        };
        const { _res: res, _opts: opts } = this;
        if (res.loading) {
          if (typeof opts.delay === "number") {
            if (opts.delay === 0) {
              this._state.pastDelay = true;
            } else {
              this._delay = setTimeout(() => {
                this._update({
                  pastDelay: true
                });
              }, opts.delay);
            }
          }
          if (typeof opts.timeout === "number") {
            this._timeout = setTimeout(() => {
              this._update({
                timedOut: true
              });
            }, opts.timeout);
          }
        }
        this._res.promise.then(() => {
          this._update({});
          this._clearTimeouts();
        }).catch((_err) => {
          this._update({});
          this._clearTimeouts();
        });
        this._update({});
      }
      _update(partial) {
        this._state = {
          ...this._state,
          error: this._res.error,
          loaded: this._res.loaded,
          loading: this._res.loading,
          ...partial
        };
        this._callbacks.forEach((callback) => callback());
      }
      _clearTimeouts() {
        clearTimeout(this._delay);
        clearTimeout(this._timeout);
      }
      getCurrentValue() {
        return this._state;
      }
      subscribe(callback) {
        this._callbacks.add(callback);
        return () => {
          this._callbacks.delete(callback);
        };
      }
      constructor(loadFn, opts) {
        this._loadFn = loadFn;
        this._opts = opts;
        this._callbacks = /* @__PURE__ */ new Set();
        this._delay = null;
        this._timeout = null;
        this.retry();
      }
    };
    function Loadable(opts) {
      return createLoadableComponent(load, opts);
    }
    function flushInitializers(initializers, ids) {
      let promises = [];
      while (initializers.length) {
        let init = initializers.pop();
        promises.push(init(ids));
      }
      return Promise.all(promises).then(() => {
        if (initializers.length) {
          return flushInitializers(initializers, ids);
        }
      });
    }
    Loadable.preloadAll = () => {
      return new Promise((resolveInitializers, reject) => {
        flushInitializers(ALL_INITIALIZERS).then(resolveInitializers, reject);
      });
    };
    Loadable.preloadReady = (ids) => {
      if (ids === void 0) ids = [];
      return new Promise((resolvePreload) => {
        const res = () => {
          initialized = true;
          return resolvePreload();
        };
        flushInitializers(READY_INITIALIZERS, ids).then(res, res);
      });
    };
    if (typeof window !== "undefined") {
      window.__NEXT_PRELOADREADY = Loadable.preloadReady;
    }
    var _default = Loadable;
  }
});

// node_modules/next/dist/shared/lib/dynamic.js
var require_dynamic = __commonJS({
  "node_modules/next/dist/shared/lib/dynamic.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _export(target, all) {
      for (var name in all) Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
      });
    }
    _export(exports, {
      /**
      * This function lets you dynamically import a component.
      * It uses [React.lazy()](https://react.dev/reference/react/lazy) with [Suspense](https://react.dev/reference/react/Suspense) under the hood.
      *
      * Read more: [Next.js Docs: `next/dynamic`](https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading#nextdynamic)
      */
      default: function() {
        return dynamic;
      },
      noSSR: function() {
        return noSSR;
      }
    });
    var _interop_require_default = require_interop_require_default();
    var _jsxruntime = require_jsx_runtime();
    var _react = _interop_require_default._(require_react());
    var _loadablesharedruntime = _interop_require_default._(require_loadable_shared_runtime());
    var isServerSide = typeof window === "undefined";
    function convertModule(mod) {
      return {
        default: (mod == null ? void 0 : mod.default) || mod
      };
    }
    function noSSR(LoadableInitializer, loadableOptions) {
      delete loadableOptions.webpack;
      delete loadableOptions.modules;
      if (!isServerSide) {
        return LoadableInitializer(loadableOptions);
      }
      const Loading = loadableOptions.loading;
      return () => (0, _jsxruntime.jsx)(Loading, {
        error: null,
        isLoading: true,
        pastDelay: false,
        timedOut: false
      });
    }
    function dynamic(dynamicOptions, options) {
      let loadableFn = _loadablesharedruntime.default;
      let loadableOptions = {
        // A loading component is not required, so we default it
        loading: (param) => {
          let { error, isLoading, pastDelay } = param;
          if (!pastDelay) return null;
          if (true) {
            if (isLoading) {
              return null;
            }
            if (error) {
              return (0, _jsxruntime.jsxs)("p", {
                children: [
                  error.message,
                  (0, _jsxruntime.jsx)("br", {}),
                  error.stack
                ]
              });
            }
          }
          return null;
        }
      };
      if (dynamicOptions instanceof Promise) {
        loadableOptions.loader = () => dynamicOptions;
      } else if (typeof dynamicOptions === "function") {
        loadableOptions.loader = dynamicOptions;
      } else if (typeof dynamicOptions === "object") {
        loadableOptions = {
          ...loadableOptions,
          ...dynamicOptions
        };
      }
      loadableOptions = {
        ...loadableOptions,
        ...options
      };
      const loaderFn = loadableOptions.loader;
      const loader = () => loaderFn != null ? loaderFn().then(convertModule) : Promise.resolve(convertModule(() => null));
      if (loadableOptions.loadableGenerated) {
        loadableOptions = {
          ...loadableOptions,
          ...loadableOptions.loadableGenerated
        };
        delete loadableOptions.loadableGenerated;
      }
      if (typeof loadableOptions.ssr === "boolean" && !loadableOptions.ssr) {
        delete loadableOptions.webpack;
        delete loadableOptions.modules;
        return noSSR(loadableFn, loadableOptions);
      }
      return loadableFn({
        ...loadableOptions,
        loader
      });
    }
    if ((typeof exports.default === "function" || typeof exports.default === "object" && exports.default !== null) && typeof exports.default.__esModule === "undefined") {
      Object.defineProperty(exports.default, "__esModule", { value: true });
      Object.assign(exports.default, exports);
      module.exports = exports.default;
    }
  }
});

// node_modules/next/dynamic.js
var require_dynamic2 = __commonJS({
  "node_modules/next/dynamic.js"(exports, module) {
    module.exports = require_dynamic();
  }
});
export default require_dynamic2();
//# sourceMappingURL=next_dynamic.js.map
